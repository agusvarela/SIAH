@model SIAH.Models.Hospital

@{
    ViewBag.Title = "Nuevo hospital";
    Layout = "~/Views/Shared/_NewLayout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="banner-catalog">
        <div class="container">
            <div class="col-sm-9">
                <h1>Registrar nuevo hospital</h1>
                <div class="banner-catalog__content">Registre un nuevo hospital en el sistema.</div>
            </div>
            <div class="col-lg-3">
                <div class="icon icon-danger">
                    <i class="material-icons pull-right" style="font-size: 100px">local_hospital</i>
                </div>
            </div>
        </div>
    </div>
    <br />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="container" style=" padding-bottom: 30px;">

        <div class="form-horizontal">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-card form-card--purple form-card--tight animated zoomIn">
                        <div class="form-card__title  purple-header">
                            <div class="alert-icon">
                                <i class="material-icons">add</i>
                                <strong>Información del hospital</strong>
                            </div>
                        </div>
                        <div class="form-card__content group">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.nombre, "Nombre", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.localidad, "Localidad", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            @Html.DropDownList("localidadId", null, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.localidadId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.presupuesto, "Presupuesto", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            @Html.EditorFor(model => model.presupuesto, new { htmlAttributes = new { @class = "form-control", @Name = "precioUnitario", @onkeypress = "return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 44", data_val = "false" } })
                                            @Html.ValidationMessageFor(model => model.presupuesto, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.telefono, "Telefono", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            @Html.EditorFor(model => model.telefono, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.telefono, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.direccion, "Dirección", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            @Html.EditorFor(model => model.direccion, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.direccion, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.latitud, "Latitud", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            @Html.EditorFor(model => model.latitud, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.latitud, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.longitud, "Longitud", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-12">
                                            @Html.EditorFor(model => model.longitud, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.longitud, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="alert alert-info pq-alert  animated zoomIn">
                                <i class="fa fa-arrow-right"></i>
                                <span>Haga click en la ubicación del hospital para obtener sus coordenadas</span>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <input id="pac-input"
                                           class="controls form-control"
                                           type="text"
                                           placeholder="Ingrese el nombre del hospital o su dirección" />
                                    <div id="googleMap" style="width:100%; height:600px"></div>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="pull-right col-md-2">
                                    <input type="submit" value="Crear hospital" class="btn btn-round btn-success pull-right" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <input type="button" style="margin-top: 20px;" id="volver" value="Volver al listado de hospitales" class="btn pull-left btn-primary" />
        </div>
    </div>
}

@section Scripts{
    <script src="https://maps.googleapis.com/maps/api/js?key=@System.Configuration.ConfigurationManager.AppSettings["googleApiKey"]&callback=myMap&libraries=places" async defer></script>
    //
    <script type="text/javascript">
        
        function myMap() {
            var mapProp = {
                center: new google.maps.LatLng(-31.425, -64.183), //Coordinates from Cordoba, Cordoba, Argentina
                zoom: 14,
            };
            var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
            var geocoder = new google.maps.Geocoder();
            google.maps.event.addListener(map, 'click', function (event) {
                setCoordinates(event.latLng);
                geocoder.geocode({
                    'latLng': event.latLng
                }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            setDirection(results[0].address_components)
                        }
                    }
                });
            });
            const input = document.getElementById("pac-input");
            const searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            // Bias the SearchBox results towards current map's viewport.
            map.addListener("bounds_changed", () => {
                searchBox.setBounds(map.getBounds());
            });
            let markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener("places_changed", () => {
                const places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }
                // Clear out the old markers.
                markers.forEach((marker) => {
                    marker.setMap(null);
                });
                markers = [];
                // For each place, get the icon, name and location.
                const bounds = new google.maps.LatLngBounds();
                places.forEach((place) => {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    const icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25),
                    };
                    // Create a marker for each place.
                    markers.push(
                        new google.maps.Marker({
                            map,
                            icon,
                            title: place.name,
                            position: place.geometry.location,
                        })
                    );

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                    setCoordinates(place.geometry.location)
                    setDirection(place.address_components)
                });
                map.fitBounds(bounds);
            });
        }

        function setCoordinates(location) {
            document.getElementById("latitud").value = location.lat();
            document.getElementById("longitud").value = location.lng();
        }

        function setDirection(address) {
            var direccion = address[1].long_name + " " + address[0].long_name;
            document.getElementById("direccion").value = direccion
        }

        $(document).ready(function () {
            $('#volver').on('click', function (event) {
                Swal.fire({
                    title: '¿Está seguro que desea volver?',
                    text: "Cualquier cambio realizado se perdera",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: "#28a745",
                    confirmButtonText: 'Aceptar',
                    cancelButtonColor: "#dc3545",
                    cancelButtonText: 'Cancelar',
                    showCloseButton: true,
                    reverseButtons: true
                }).then((result) => {
                    if (result.value) {
                        location.href = '/Hospitales';
                    }
                });
            });
        });
    </script>
}
