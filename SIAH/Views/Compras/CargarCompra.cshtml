@model SIAH.Models.Compras.Compra

@{
    ViewBag.Title = "Cargar compra";
    Layout = "~/Views/Shared/_NewLayout.cshtml";
    ViewBag.validacion = true;
    if (ViewBag.success == null)
    {
        ViewBag.success = false;
        ViewBag.validacion = false;

    }
}
@using (Html.BeginForm("CargarCompra", "Compras", FormMethod.Post, new { id = "cargarCompraForm" }))
{
    <div class="banner-catalog">
        <div class="container">
            <div class="col-sm-12">
                <h1>Cargar remito de compra</h1>
                <div class="banner-catalog__content">Carga de archivos de remito de compra.</div>
            </div>
        </div>
    </div>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <br />
    <div class="container" style=" padding-bottom: 30px;">

        <div class="form-horizontal">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-card form-card--purple form-card--tight animated zoomIn">
                        <div class="form-card__title  purple-header">
                            <div class="alert-icon">
                                <i class="material-icons">add</i>
                                <strong>Carga de detalles</strong>
                            </div>
                        </div>
                        <div class="form-card__content group">

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.Label("Nombre", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-8">
                                            <input class="form-control text-box single-line valid" id="proveedor" name="proveedor" required type="text" data-val="true" 
                                                   placeholder="Ingrese el nombre del proveedor" oninput="checkText(this, 5);" />
                                            @Html.ValidationMessageFor(model => model.cuilProveedor, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.Label("CUIL", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-6">
                                            <input class="form-control text-box single-line valid" type="text" data-val="true" data-val-length="El campo debe poseer una longitud de 11 dígitos." data-val-length-max="11"
                                                   min="11" data-val-required="El CUIL es obligatorio." onkeypress="return checkNumber(event, 11)" onkeydown="return borrado(event)" id="cuil" name="cuil" required placeholder="CUIL del proveedor" />
                                            @Html.ValidationMessageFor(model => model.proveedor, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.Label("Número Comprobante", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-6">
                                            <input class="form-control text-box single-line valid" type="text" data-val="true" data-val-length="El campo debe poseer una longitud de 12 dígitos." pattern="[0-9]+" data-val-length-max="12"
                                                   min="12" data-val-required="El número de comprobante es obligatorio." onkeypress="return checkNumber(event, 12)" onkeydown="return borrado(event)" id="numeroComprobante" name="numeroComprobante" required placeholder="Número de comprobante" style="margin-top: 10px;" />
                                            @Html.ValidationMessageFor(model => model.numeroComprobante, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.Label("Fecha Entrega", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-8">
                                            <input id="fechaEntregaEfectiva" type="date" onchange="checkFecha()" style="font-size:16px; padding-top: 10px; padding-left: 10px; width: 150px; border: 0; background-image: linear-gradient(#e91e63, #e91e63), linear-gradient(#D2D2D2, #D2D2D2);
                                                background-size: 0 2px, 100% 1px; line-height: 1.82857; background-repeat: no-repeat; background-position: center bottom, center calc(100% - 1px); background-color: transparent;" placeholder="DD/MM/AAAA" required />
                                            @Html.ValidationMessageFor(model => model.fechaEntregaEfectiva, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="padding-top: 40px;"></div>
                            <div class="row">
                                <div class="col-md-12">
                                    <input type="file" class="form-control-file btn btn-info btn-round" id="file" name="file" accept=".csv" onchange="checkfile(this);" style="width: 500px;" required />
                                    <label for="file" style="border-left-width: 10px; padding-left: 30px; padding-top: 10px;">Seleccione un archivo con extensión .csv</label>
                                    <input type="button" id="cargarCompra" value="Cargar compra" class="btn btn-round btn-success pull-right" data-toggle="modal" data-target="#myModal" style="margin-right: 20px; margin-top: 20px;" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <input type="button" style="margin-top: 40px;" id="volver" value="Volver al listado de compras" class="btn pull-left btn-primary" />
        </div>
    </div>

    @Html.TextBox("fechaCargaCompra", DateTime.Today.ToShortDateString(), htmlAttributes: new { @class = "form-control", @value = DateTime.Today, @name = "fechaEntregaEfectiva", @id = "fechaCargaCompra", @type = "hidden", style = "margin-top: 0px;" })

}
@section Scripts {
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/start/jquery-ui.css" />
    <script type="text/javascript">
        var detalleJson;
        var fileSelected;

        $(document).ready(function () {
            document.getElementById('fechaEntregaEfectiva').setCustomValidity('La fecha de entrega es requerida.');

            $('#cargarCompra').click(function () {
                if (document.getElementById('cargarCompraForm').reportValidity()) {
                    $.ajax({
                        url: "/Compras/CargarCompra",
                        type: "POST",
                        data: JSON.stringify({
                            cuilProveedor: $('#cuil').val(),
                            proveedor: $('#proveedor').val(),
                            fechaEntregaEfectiva: $('#fechaEntregaEfectiva').val(),
                            fechaCargaCompra: $('#fechaCargaCompra').val(),
                            numeroComprobante: $('#numeroComprobante').val(),
                            detallesCompra: detalleJson
                        }),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            location.href = '/Compras?param=success';
                        },
                        error: function (error) {
                            if (error.status == 403) {
                                Swal.fire({
                                    title: 'Error!',
                                    text: "El comprobante que esta deseando cargar, ya se encuentra previamente cargado.",
                                    icon: 'error',
                                    confirmButtonColor: "#3085d6",
                                    showCloseButton: true,
                                    confirmButtonText: 'Ok',
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: "Hubo un error inesperado al intentar guardar el comprobante.",
                                    icon: 'error',
                                    confirmButtonColor: "#3085d6",
                                    showCloseButton: true,
                                    confirmButtonText: 'Ok',
                                });
                            }
                        }
                    });
                }
            });

            $('#fechaEntregaEfectiva').datepicker({
                dateFormat: 'yy-mm-dd',
                changeMonth: true,
                changeYear: true,
                maxDate: 0,
                onClose: function (selectedDate) {},
                monthNamesShort: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                dayNamesMin: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
                showMonthAfterYear: true,
                closeText: 'Cerrar',
                currentText: 'Hoy',
                showMonthAfterYear: true
            });

            $('#volver').on('click', function (event) {
                Swal.fire({
                    title: '¿Está seguro que desea volver?',
                    text: "Cualquier cambio realizado se perderá",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: "#28a745",
                    confirmButtonText: 'Aceptar',
                    cancelButtonColor: "#dc3545",
                    cancelButtonText: 'Cancelar',
                    showCloseButton: true,
                    reverseButtons: true
                }).then((result) => {
                    if (result.value) {
                        location.href = '/Compras';
                    }
                });
            });

            if (@ViewBag.success.ToString().ToLower() === true) {
                $.notify({
                    title: '<strong>Aviso!</strong><br/>',
                    message: 'Compra impactada correctamente.'
                }, {
                    type: 'success',
                    offset: {
                        x: 20,
                        y: 90
                    }
                },
                );

            }
            else {
                if (@ViewBag.validacion.ToString().ToLower()=== true) {
                    $.notify({
                        title: '<strong>Aviso!</strong><br/>',
                        message: 'Hubo un error en la carga de la compra.'
                    }, {
                        type: 'danger',
                        offset: {
                            x: 20,
                            y: 80
                        }
                    },
                    );
                }
            }
        });

        function checkFecha() {
            if (document.getElementById('fechaEntregaEfectiva').value != '') {
                document.getElementById('fechaEntregaEfectiva').setCustomValidity('');
            }
        }

        function checkNumber(event, length) {
            var theEvent = event || window.event;

            // Handle paste
            if (theEvent.type === 'paste') {
                key = event.clipboardData.getData('text/plain');
            } else {
                // Handle key press
                var key = theEvent.keyCode || theEvent.which;
                key = String.fromCharCode(key);
            }
            var newLength = document.getElementById(event.currentTarget.id).value.length + 1;
            var regex = /[0-9]/;
            if (!regex.test(key) || newLength > length) {
                theEvent.returnValue = false;
                if (theEvent.preventDefault) theEvent.preventDefault();
            }

            if (newLength < length) {
                document.getElementById(event.currentTarget.id).setCustomValidity("El número debe ser de " + length + " dígitos.");
            } else {
                if (theEvent.returnValue) {
                    document.getElementById(event.currentTarget.id).setCustomValidity("");
                }
            }
        }

        function borrado(event) {
            if (event.keyCode == 8 || event.keyCode == 46) {
                document.getElementById(event.currentTarget.id).setCustomValidity("El número debe ser de " + length + " dígitos.");
            }
        }

        function checkText(event, length) {
            if (event.value.length < length) {
                document.getElementById(event.id).setCustomValidity("El nombre debe poseer mínimo " + length + " caracteres.");
            } else {
                document.getElementById(event.id).setCustomValidity("");
            }
        }

        // convert csv to json
        function csvJSON(csvText) {
            let lines = [];
            const linesArray = csvText.split('\n');
            // for trimming and deleting extra space
            linesArray.forEach((e) => {
                const row = e.replace(/[\s]+[,]+|[,]+[\s]+/g, ',').trim();
                lines.push(row);
            });
            // for removing empty record
            lines.splice(lines.length - 1, 1);
            const result = [];
            const headers = lines[0].split(",");

            for (let i = 1; i < lines.length; i++) {

                const obj = {};
                const currentline = lines[i].split(",");

                for (let j = 0; j < headers.length; j++) {
                    obj[headers[j]] = currentline[j];
                }
                result.push(obj);
            }
            return result; //JavaScript object
            //return JSON.stringify(result); //JSON
        }

        function checkfile(sender) {
            var validExts = ".csv";
            var fileExt = sender.value;
            fileSelected = fileExt;
            fileExt = fileExt.substring(fileExt.lastIndexOf('.'));

            if (validExts != fileExt) {

                Swal.fire({
                    title: 'Observación',
                    text: "No seleccionó ningún archivo o la extensión no era del tipo .csv, por favor seleccione nuevamente.",
                    icon: 'info',
                    confirmButtonColor: "#3085d6",
                    showCloseButton: true,
                    confirmButtonText: 'Ok',
                });

                detalleJson = "";
                $('#file').val('');
                return false;
            }

            const reader = new FileReader();
            reader.readAsText(sender.files[0]);
            reader.onload = () => {
                const text = reader.result;
                detalleJson = this.csvJSON(text);
            };
        }
    </script>
}